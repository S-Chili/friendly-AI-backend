const natural = require("natural");
const fs = require("fs");
const path = require("path");
const TrainingStatus = require("./models/TrainingStatus");
const TrainingData = require("./models/TrainingData");

const CLASSIFIER_PATH = path.join(__dirname, "classifier.json");
let classifier = new natural.BayesClassifier();
let isClassifierReady = false;
let isClassifierLoading = false;

const loadClassifier = async () => {
  if (isClassifierLoading) {
    console.log("‚ÑπÔ∏è –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...");
    return false;
  }

  if (isClassifierReady) {
    console.log("‚úÖ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
    return true;
  }

  if (!fs.existsSync(CLASSIFIER_PATH)) {
    console.warn("‚ö†Ô∏è –§–∞–π–ª –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    return false;
  }

  console.log("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —ñ–∑ —Ñ–∞–π–ª—É...");
  isClassifierLoading = true;

  return new Promise((resolve, reject) => {
    natural.BayesClassifier.load(CLASSIFIER_PATH, null, async (err, loaded) => {
      isClassifierLoading = false;
      if (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞:", err);
        return reject(false);
      }

      classifier = loaded;
      isClassifierReady = true;
      console.log(
        "‚úÖ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤:",
        classifier.docs.length
      );
      await TrainingStatus.updateOne(
        { model: "yourModel" },
        { isTrained: true },
        { upsert: true }
      );
      resolve(true);
    });
  });
};

const trainModel = async () => {
  console.log("üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...");

  const trainingData = await TrainingData.find();
  if (!trainingData || trainingData.length === 0) {
    console.error("‚ùå –î–∞–Ω—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.");
    return false;
  }

  console.log("üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", trainingData);

  const newClassifier = new natural.BayesClassifier();
  let validCount = 0;

  trainingData.forEach(({ input, output }, i) => {
    if (
      typeof input === "string" &&
      input.trim() !== "" &&
      typeof output === "string" &&
      output.trim() !== ""
    ) {
      newClassifier.addDocument(input.trim(), output.trim());
      validCount++;
    } else {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å #${i + 1}`);
    }
  });

  if (validCount === 0) {
    console.error("‚ùå –ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.");
    return false;
  }

  console.log(`‚úÖ –î–æ–¥–∞–Ω–æ ${validCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...`);
  newClassifier.train();

  // –¢–µ–ø–µ—Ä –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏–π
  classifier = newClassifier;
  isClassifierReady = true;

  // –î–æ–¥–∞—Ç–∫–æ–≤–µ —Ç–µ—Å—Ç–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
  newClassifier.addDocument("–ü—Ä–∏–≤—ñ—Ç", "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è");
  newClassifier.addDocument("–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "–ü–∏—Ç–∞–Ω–Ω—è");
  newClassifier.train();

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
  newClassifier.save(CLASSIFIER_PATH, (err) => {
    if (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞", err);
    } else {
      console.log("‚úÖ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è");
    }
  });

  await new Promise((resolve, reject) => {
    classifier.save(CLASSIFIER_PATH, (err) => {
      if (err) {
        console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä:", err);
        return reject(err);
      }
      console.log("üíæ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", CLASSIFIER_PATH);
      resolve();
    });
  });

  await TrainingStatus.updateOne(
    { model: "yourModel" },
    { isTrained: true, trainedAt: new Date() },
    { upsert: true }
  );

  console.log("üéâ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
  return true;
};

const getMLResponse = async (message) => {
  console.log(`üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message}"`);

  const status = await TrainingStatus.findOne({ model: "yourModel" });
  if (!status?.isTrained) {
    console.error("‚ùå –ú–æ–¥–µ–ª—å —â–µ –Ω–µ –Ω–∞–≤—á–µ–Ω–∞.");
    return "–ú–æ—è –±–∞–∑–∞ –∑–Ω–∞–Ω—å —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ üòû";
  }

  if (!isClassifierReady) {
    const loaded = await loadClassifier();
    if (!loaded) return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —ñ–∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º üòî";
  }

  try {
    const response = classifier.classify(message);
    console.log(`ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: "${response}"`);
    return response || "–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –†–æ–∑–∫–∞–∂–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ —Ü–µ!";
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", err);
    return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!";
  }
};

module.exports = { loadClassifier, trainModel, getMLResponse };
