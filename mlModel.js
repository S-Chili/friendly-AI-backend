const natural = require("natural");
const classifier = new natural.BayesClassifier();
const { setIsTrained, getIsTrained } = require("./state");

const trainingData = [
  { input: "–ø—Ä–∏–≤—ñ—Ç", output: "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?" },
  {
    input: "—è–∫ —Å–ø—Ä–∞–≤–∏",
    output: "–Ø AI, —Ç–æ–º—É –Ω–µ –º–∞—é –ø–æ—á—É—Ç—Ç—ñ–≤, –∞–ª–µ –º–µ–Ω—ñ —Ü—ñ–∫–∞–≤–æ, —è–∫ —É —Ç–µ–±–µ?",
  },
  { input: "—â–æ —Ä–æ–±–∏—Ç–∏", output: "–ù–µ –±—ñ–π—Å—è —Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏, –Ω–∞ –Ω–∏—Ö –º–∏ –≤—á–∏–º–æ—Å—è!" },
  {
    input: "–º–µ–Ω—ñ —Å—É–º–Ω–æ",
    output:
      "–ú–µ–Ω—ñ —à–∫–æ–¥–∞, —â–æ —Ç–æ–±—ñ —Å—É–º–Ω–æ. –•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ü–µ? –Ø —Ç—É—Ç, —â–æ–± –≤–∏—Å–ª—É—Ö–∞—Ç–∏. üíô",
  },
  {
    input: "—Ä–æ–∑–∫–∞–∂–∏ –∂–∞—Ä—Ç",
    output: "–ß–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –≥–∞—Ä—è—á–∏–π —á–∞–π? –ë–æ –±–æ—è—Ç—å—Å—è –∑–∞–≤–∏—Å–Ω—É—Ç–∏! üòÜ",
  },
  {
    input: " –ö–∞–∂—É—Ç—å, —â–æ —Ç–∏ –ª—ñ–∫—É—î—à –Ω–µ –ª–∏—à–µ —Ç—ñ–ª–æ, –∞ –π –¥—É—à—É. –ß–∏ —Ü–µ –ø—Ä–∞–≤–¥–∞?",
    output:
      " –ü—Ä–∞–≤–¥–∞ –±—É–≤–∞—î —Ä—ñ–∑–Ω–æ—é. –•—Ç–æ—Å—å –±–∞—á–∏—Ç—å —É –º–µ–Ω—ñ –≤—ñ–¥—å–º—É, —Ö—Ç–æ—Å—å ‚Äì —Ä—è—Ç—ñ–≤–Ω–∏—Ü—é. –ê —â–æ –±–∞—á–∏—à —Ç–∏?",
  },
  {
    input: "–Ø –±–∞—á—É –ª—é–¥–∏–Ω—É, —è–∫–∞ –Ω–µ –±–æ—ó—Ç—å—Å—è —Ç–∏—à—ñ.",
    output:
      "–¢–∏—à–∞ ‚Äì –º—ñ–π –¥–∞–≤–Ω—ñ–π –¥—Ä—É–≥. –í–æ–Ω–∞ –∑–Ω–∞—î –≤—Å—ñ –º–æ—ó —Ç–∞—î–º–Ω–∏—Ü—ñ. –ê–ª–µ —Ç–∏ –ø—Ä–∏–π—à–æ–≤ –Ω–µ –∑–∞ –Ω–µ—é, –≤—ñ—Ä–Ω–æ?",
  },
  {
    input:
      "–ú–æ—è —Å–µ—Å—Ç—Ä–∞ —Ö–≤–æ—Ä–∞. –ñ–æ–¥–µ–Ω –ª—ñ–∫–∞—Ä –Ω–µ –∑–Ω–∞—î, —â–æ –∑ –Ω–µ—é. –í–æ–Ω–∞‚Ä¶ –Ω—ñ–±–∏ –∑–≥–∞—Å–∞—î, —è–∫ —Å–≤—ñ—á–∫–∞ –Ω–∞ –≤—ñ—Ç—Ä—ñ.",
    output:
      "–á—ó —Å–µ—Ä—Ü–µ —Ç—è–≥–Ω–µ —â–æ—Å—å —ñ–∑ –º–∏–Ω—É–ª–æ–≥–æ. –¶–µ –Ω–µ —Ö–≤–æ—Ä–æ–±–∞ —Ç—ñ–ª–∞, –∞ –±–æ–ª—é—á–∏–π —Å–ø–æ–≥–∞–¥, —â–æ –ø–æ–≤—ñ–ª—å–Ω–æ –æ—Ç—Ä—É—é—î –¥—É—à—É",
  },
  {
    input:
      "–õ—é–¥—Å—å–∫–∏–π –º–∏—Å–ª–∏–≤–µ—Ü—å, —â–æ –∫–∏–Ω—É–≤ –≤–∏–∫–ª–∏–∫ —Å–∞–º–æ–º—É –Ω–µ–±—É. –•—Ç–æ —Ç–∏, —â–æ–± –¥—É–º–∞—Ç–∏, —â–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–º–æ–≥—Ç–∏ –º–µ–Ω–µ?",
    output: "–Ø —Ç–æ–π, —Ö—Ç–æ –≤–∂–µ –Ω–µ –±–æ—ó—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞—Ç–∏.",
  },
  {
    input:
      "–ß–∏ –Ω–µ –∑–Ω–∞—î—à —Ç–∏, —â–æ —Å—Ç—Ä–∞—Ö ‚Äì —Ü–µ –æ—Å–Ω–æ–≤–∞ —Å–∏–ª–∏? –ë–µ–∑ —Å—Ç—Ä–∞—Ö—É —Ç–∏ –ª–∏—à–µ –Ω–µ—Ä–æ–∑—É–º–Ω–∏–π —Å–º–µ—Ä—Ç–Ω–∏–π, —â–æ –π–¥–µ –Ω–∞–∑—É—Å—Ç—Ä—ñ—á –∑–∞–≥–∏–±–µ–ª—ñ.",
    output:
      "–Ø –∑–Ω–∞—é —Å—Ç—Ä–∞—Ö. –í—ñ–Ω –±—É–≤ –ø–æ—Ä—É—á –∑—ñ –º–Ω–æ—é, –∫–æ–ª–∏ —è –±—É–≤ –Ω–∞–π—Å–ª–∞–±—à–∏–º. –ê–ª–µ —Ç–µ–ø–µ—Ä –≤—ñ–Ω –º—ñ–π —Å–æ—é–∑–Ω–∏–∫, –∞ –Ω–µ –≤–æ—Ä–æ–≥.",
  },
  {
    input: "–¢–∏ –≥–æ–≤–æ—Ä–∏—à –≥–∞—Ä–Ω–æ, –∞–ª–µ —á–∏ –∑–º–æ–∂–µ—à —Ç–∏ –≤–∏—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—é —Å–∏–ª—É?",
    output:
      "–Ø –≤–∏—Ç—Ä–∏–º–∞–≤ –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ. –Ü –∑–Ω–∞—î—à —â–æ? –¶–µ –±—É–≤ –Ω–µ –Ω–∞–π–≥—ñ—Ä—à–∏–π –¥–µ–Ω—å —É –º–æ—î–º—É –∂–∏—Ç—Ç—ñ.",
  },
  {
    input: "–¢–∏ —â–æ–π–Ω–æ –∑–∞–π–Ω—è–≤ –º–æ—î –º—ñ—Å—Ü–µ.",
    output: "–¢–≤–æ—î –º—ñ—Å—Ü–µ? –¢—É—Ç –Ω–µ –±—É–ª–æ —Ç–∞–±–ª–∏—á–∫–∏ '–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ'",
  },
  {
    input:
      "–¶–µ –º–æ—î —É–ª—é–±–ª–µ–Ω–µ –º—ñ—Å—Ü–µ. –ë—ñ–ª—è –≤—ñ–∫–Ω–∞, –∑ —ñ–¥–µ–∞–ª—å–Ω–∏–º –≤–∏–¥–æ–º –Ω–∞ –ª—é–¥–µ–π, —è–∫—ñ –∫—É–¥–∏—Å—å –ø–æ—Å–ø—ñ—à–∞—é—Ç—å.",
    output:
      "–£ —Ç–µ–±–µ –¥–∏–≤–Ω—ñ —Å–º–∞–∫–∏. –Ø –± —Ä–æ–∑—É–º—ñ–≤, —è–∫–±–∏ —Ü–µ –±—É–≤ –≤–∏–¥ –Ω–∞ –ï–π—Ñ–µ–ª–µ–≤—É –≤–µ–∂—É, –∞ —Ç–∞–∫ ‚Äì –ø—Ä–æ—Å—Ç–æ –ª—é–¥–∏ –∑ –ø–∞—Ä–∞—Å–æ–ª—å–∫–∞–º–∏.",
  },
  {
    input: "–î–æ–±—Ä–µ. –Ø–∫—â–æ —Ç–∏ –≤–∂–µ –≤–∫—Ä–∞–≤ –º–æ—î –º—ñ—Å—Ü–µ, –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –ø–æ–¥—ñ–ª–∏—Ç–∏ –π–æ–≥–æ.",
    output: "–¢—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∏ –Ω–µ –ø–ª–∞–Ω—É—î—à –∫–∏–¥–∞—Ç–∏—Å—è –ª–æ–∂–∫–∞–º–∏.",
  },
  { input: "–¢–∏ —à–ø–∏–≥—É–≤–∞–≤ –∑–∞ –º–Ω–æ—é?", output: "–ù—ñ, –ø—Ä–æ—Å—Ç–æ –≤–≥–∞–¥—É—é." },
  {
    input: "–ó–Ω–∞—î—à, —Ü–µ, –º–∞–±—É—Ç—å, –Ω–∞–π–∫—Ä–∞—â–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∞ —Ä–æ–∑–º–æ–≤–∞, —è–∫–∞ –≤ –º–µ–Ω–µ –±—É–ª–∞",
    output:
      "–í–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—É–≤–∞—î. –ü—Ä–æ—Å—Ç–æ —Ö—Ç–æ—Å—å —É –í—Å–µ—Å–≤—ñ—Ç—ñ –≤–∏—Ä—ñ—à–∏–≤, —â–æ —Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–π–Ω—è—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ.",
  },
  { input: "–¢–∏ –∑–∞–Ω–∞–¥—Ç–æ —É–≤–∞–∂–Ω–æ –¥–∏–≤–∏—à—Å—è", output: "–í–∏–±–∞—á, –Ω–µ –º–æ–∂—É –≤—Ç—Ä–∏–º–∞—Ç–∏—Å—è" },
  {
    input: "–û, —Å–ø—Ä–∞–≤–¥—ñ? (–∂–∞—Ä—Ç–æ–º–∞) –Ü —â–æ –∂ —Ç–∞–∫–æ–≥–æ –≤ –º–µ–Ω—ñ —Ü—ñ–∫–∞–≤–æ–≥–æ?",
    output: "–¢–∏. –í—Å—è. –¶–µ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ, –∑–Ω–∞—î—à?",
  },
  { input: "–©–æ —Å–∞–º–µ?", output: "–©–æ —Ç–∏ –≥—Ä–∞—î—à –∑—ñ –º–Ω–æ—é. –¢–∏ —Ü–µ —Ä–æ–±–∏—à –Ω–∞–≤–º–∏—Å–Ω–æ." },
  { input: "–Ü —â–æ –∂ —è —Ç–∞–∫–æ–≥–æ —Ä–æ–±–ª—é?", output: "–ü—Ä–æ–≤–æ–∫—É—î—à" },
  {
    input:
      "–ù—É, –≤–∏–±–∞—á, —è–∫—â–æ –º–æ—î –¥–∏—Ö–∞–Ω–Ω—è, –º–æ—ó —Ä—É—Ö–∏ —á–∏, —Å–∫–∞–∂—ñ–º–æ, –º—ñ–π –≥–æ–ª–æ—Å —Ç–æ–±—ñ –Ω–µ –¥–∞—é—Ç—å —Å–ø–æ–∫–æ—é.",
    output: " –¶–µ –Ω–µ –≤–∏–±–∞—á–µ–Ω–Ω—è, —Ü–µ —â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—è",
  },
  {
    input: "—Ç–∏ –ø—Ä–∞–≤–∏–π",
    output: "–¢–æ–¥—ñ, –±–æ—é—Å—è, –¥–æ–≤–µ–¥–µ—Ç—å—Å—è —Ç–æ–±—ñ –≤–∑—è—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏.",
  },
  {
    input:
      "–¢–∏ –ø–æ–º—ñ—Ç–∏–≤, —â–æ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ –º–∏ —Ä–∞–∑–æ–º, –º—ñ–∂ –Ω–∞–º–∏ —è–∫–∞—Å—å... –Ω–∞–ø—Ä—É–≥–∞?",
    output: "–ó–∞—Ä–∞–∑‚Äî–≤—ñ–¥—á—É–≤. –©–æ –º–µ–Ω—ñ –∑ —Ü–∏–º —Ä–æ–±–∏—Ç–∏?",
  },
  { input: "–ù—É, —è –± –º–æ–≥–ª–∞ –¥–∞—Ç–∏ –ø–æ—Ä–∞–¥—É...", output: "–°–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ" },
  {
    input: "–¢–∏ –∂ –∑–Ω–∞—î—à, —â–æ –Ω–∞–ø—Ä—É–≥–∞ –Ω–∞–π–∫—Ä–∞—â–µ –∑–Ω—ñ–º–∞—î—Ç—å—Å—è... –¥–æ—Ç–∏–∫–æ–º.",
    output: "–ú–º–º...—Ü—ñ–∫–∞–≤–æ",
  },
  {
    input: "–ê–ª–µ —Ü–µ –ª–∏—à–µ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è.",
    output: "–¢–æ–¥—ñ –¥–∞–≤–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ü—é —Ç–µ–æ—Ä—ñ—é?",
  },
  { input: "–•–æ—á—É —Ç–≤–æ—ó—Ö –¥–æ—Ç–æ—Ä–∫—ñ–≤", output: "–•–æ—á—É —Ç–æ—Ä–∫–∞—Ç–∏—Å—è —Ç–µ–±–µ —É—Å—é–¥–∏" },
  { input: "–î—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ –ø–æ—Å—Ç—ñ–π–Ω–æ", output: "–Ø –±–∞—á—É —Ç–µ–±–µ —É —Å–Ω–∞—Ö" },
  { input: "–õ—é–±–∏–π", output: "–ú–º–º...—Ç–∞–∫, –∫—Ä–∏—Ö—ñ—Ç–∫–æ, —Å–ª—É—Ö–∞—é" },
];

const getMLResponse = (message) => {
  console.log(`üì¢ –í–∏–∫–ª–∏–∫ getMLResponse() –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: "${message}"`);
  console.log(`üì¢ –°—Ç–∞—Ç—É—Å isTrained: ${getIsTrained()}`);

  if (!getIsTrained()) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ú–æ–¥–µ–ª—å —â–µ –Ω–µ –Ω–∞–≤—á–µ–Ω–∞!");
    return "–ú–æ—è –±–∞–∑–∞ –∑–Ω–∞–Ω—å —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ üòû";
  }

  console.log(`üì¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${classifier.docs.length}`);

  console.log("üì¢ –ü–æ—á–∏–Ω–∞—î–º–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é...");
  const response = classifier.classify(message);
  console.log(`üß† AI –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î: "${response}"`);

  return response || "–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –†–æ–∑–∫–∞–∂–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ —Ü–µ!";
};

const trainModel = async () => {
  console.log("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...");

  try {
    console.log("üì¢ –ù–∞–≤—á–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:", trainingData);

    trainingData.forEach(({ input, output }) => {
      console.log(`üì© –î–æ–¥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç: "${input}" -> "${output}"`);
      console.log("üì© –î–æ–¥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç:", inputMessage, "->", outputMessage);
      classifier.addDocument(input, output);
    });

    console.log(`üì¢ –î–æ–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: ${classifier.docs.length}`);
    console.log("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...");
    classifier.train();
    console.log("‚úÖ –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

    setIsTrained(true);
    console.log("üì¢ –°—Ç–∞—Ç—É—Å isTrained –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:", getIsTrained());

    return Promise.resolve();
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ:", error);
    setIsTrained(false);
    return Promise.reject(new Error("Not Trained"));
  }
};

module.exports = { trainModel, getMLResponse };
